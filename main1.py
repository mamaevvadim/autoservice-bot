import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = "7630062126:AAFTYJZ50fUHT7Qiq_X9vEFwgT2Uccrmyqw"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Booking(StatesGroup):
    service = State()
    car = State()
    time = State()
    name = State()
    phone = State()

@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üßæ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="book"),
        InlineKeyboardButton("üîß –£—Å–ª—É–≥–∏", callback_data="services"),
        InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="faq"),
        InlineKeyboardButton("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    await message.answer_photo(photo="https://i.imgur.com/XNbdxxy.jpeg", caption=(
        "üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å DRIVE TECH!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"
    ), reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "book")
async def start_booking(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="service_–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
        InlineKeyboardButton("üõ¢ –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", callback_data="service_–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞"),
        InlineKeyboardButton("‚öô –¢–û", callback_data="service_–¢–û"),
        InlineKeyboardButton("üß∞ –†–µ–º–æ–Ω—Ç", callback_data="service_–†–µ–º–æ–Ω—Ç")
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)
    await Booking.service.set()

@dp.callback_query_handler(lambda c: c.data.startswith("service_"), state=Booking.service)
async def ask_car(callback_query: types.CallbackQuery, state: FSMContext):
    service = callback_query.data.split("_")[1]
    await state.update_data(service=service)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ:")
    await Booking.next()

@dp.message_handler(state=Booking.car)
async def choose_time(message: types.Message, state: FSMContext):
    await state.update_data(car=message.text)
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìÜ –°–µ–≥–æ–¥–Ω—è", callback_data="time_–°–µ–≥–æ–¥–Ω—è"),
        InlineKeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="time_–ó–∞–≤—Ç—Ä–∞"),
        InlineKeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="time_–£–∫–∞–∑–∞—Ç—å")
    )
    await message.answer("–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–∏–µ—Ö–∞—Ç—å?", reply_markup=kb)
    await Booking.next()

@dp.callback_query_handler(lambda c: c.data.startswith("time_"), state=Booking.time)
async def ask_name(callback_query: types.CallbackQuery, state: FSMContext):
    time = callback_query.data.split("_")[1]
    if time == "–£–∫–∞–∑–∞—Ç—å":
        await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:")
    else:
        await state.update_data(time=time)
        await bot.send_message(callback_query.from_user.id, "–í–∞—à–µ –∏–º—è?")
        await Booking.name.set()
        return
    await state.update_data(time="–≤—Ä—É—á–Ω—É—é")
    await Booking.time.set()

@dp.message_handler(state=Booking.time)
async def manual_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("–í–∞—à–µ –∏–º—è?")
    await Booking.name.set()

@dp.message_handler(state=Booking.name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=kb)
    await Booking.phone.set()

@dp.message_handler(content_types=types.ContentType.CONTACT, state=Booking.phone)
async def confirm(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:\n"
        f"–£—Å–ª—É–≥–∞: {data['service']}\n"
        f"–ê–≤—Ç–æ: {data['car']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "services")
async def show_services(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
        "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî –æ—Ç 1500 ‚ÇΩ\n"
        "üõ¢ –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ ‚Äî –æ—Ç 1000 ‚ÇΩ\n"
        "‚öô –¢–û ‚Äî –æ—Ç 2500 ‚ÇΩ\n"
        "üß∞ –†–µ–º–æ–Ω—Ç ‚Äî –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é")

@dp.callback_query_handler(lambda c: c.data == "faq")
async def show_faq(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
        "üïí –†–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 20:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
        "üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏ –∫–∞—Ä—Ç–æ–π\n"
        "üöò –ï—Å—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∞\n"
        "üîÑ –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ ‚Äî –∑–∞ 2 —á–∞—Å–∞")

@dp.callback_query_handler(lambda c: c.data == "contacts")
async def show_contacts(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
        "üìç –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, —É–ª. –ê–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫–æ–≤, 10\n"
        "üìû –¢–µ–ª: +7 (900) 456-78-90\n"
        "üì± WhatsApp: @driveadmin")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
